# Naming conventions

camelCase   - classes, functions and variables
snake_case  - files and folders
kabob-case  - more seen in Python, more prominent in web-development [checks urls or websites], html syntax etc.

# Project 1:
1) bottom sheet
2) documentation -> widget catalog https://docs.flutter.dev
3) buttons and so on find out yourself

Use this for finding all flutter widgets: https://api.flutter.dev/flutter/widgets/widgets-library.html

# Layout:
1) Row
2) Column
3) Grid
4) List View

# Errors:
1) Overflow errors: common and showed by (yellow+black) lines. This happens when something is beyond its limits. 
            To fix it
            a) either child elements need to be trimmed down or parent elements need to be expanded
            b) SingleChildScrollView - allow the screen to be scrollable i.e. it gives infinite vertical spacing
2) Unbounded Layout errors: recognised by screen looking all blanked, "size/height/width is infinite"
            To fix it
            a) define a size for the parent widget -->  Size size = MediaQuery.of(context).size 
                                                        size.width = 0.8 // that is 80% of the width
            [media query is a class that gives the information about the screen size of the phone]
            b) use constraints - unbounded constraints https://embrace.io/blog/constraints-in-flutter/
3) Type errors: data types are wrong 
            To fix it
            a) my making the value as the data type required
            b) or force the data type to be non-nullable by using the '!' sign or by setting default values by using '??' symbols
4) Design mismatch or Incorrect design: UI does not match the design [P.S.: you are a bad developer]
            To fix it
            a) be able to translate the design to implementation
            b) write clean, maintainable code
            c) refactor code
5) Copyright issues: legal issues
            To fix it
            a) talk to designer
            b) pay for the art/license
            c) free art unsplash.com
            

# home.dart file
import 'package:flutter/material.dart';

class HomePage extends StatefulWidget {
  // nullable value
  final String? nullableTitle;

  // required value
  final String requiredTitle;

  // default value
  final String defaultTitle;

  const HomePage({
    super.key,
    this.nullableTitle,
    required this.requiredTitle,
    this.defaultTitle = 'Default',
  });

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // TRY THIS: Try changing the color here to a specific color (to
        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar
        // change color while the other colors stay the same.
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.defaultTitle),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          //
          // TRY THIS: Invoke "debug painting" (choose the "Toggle Debug Paint"
          // action in the IDE, or press "p" in the console), to see the
          // wireframe for each widget.
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
